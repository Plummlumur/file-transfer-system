# File Transfer System - Complete Debian Installation Guide

## System Requirements
- Fresh Debian 11 (Bullseye) or Debian 12 (Bookworm) installation
- Minimum 4GB RAM (8GB recommended)
- Minimum 20GB disk space (50GB+ recommended for file storage)
- Root or sudo access
- Internet connection for package downloads

## Step 1: System Preparation and Updates

### Update the system
sudo apt update && sudo apt upgrade -y

### Install essential packages
sudo apt install -y curl wget git unzip software-properties-common apt-transport-https ca-certificates gnupg lsb-release

### Install build tools
sudo apt install -y build-essential python3-dev

## Step 2: Install Docker and Docker Compose

### Add Docker's official GPG key
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

### Add Docker repository
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

### Update package index
sudo apt update

### Install Docker Engine
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

### Add current user to docker group
sudo usermod -aG docker $USER

### Enable and start Docker service
sudo systemctl enable docker
sudo systemctl start docker

### Verify Docker installation
docker --version
docker compose version

### Log out and back in for group changes to take effect
echo "Please log out and log back in, then continue with the installation"

## Step 3: Install Node.js (for development/manual installation)

### Install Node.js 18.x LTS
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt install -y nodejs

### Verify Node.js installation
node --version
npm --version

## Step 4: Install MySQL Server (if not using Docker)

### Install MySQL Server
sudo apt install -y mysql-server

### Secure MySQL installation
sudo mysql_secure_installation

### Create database and user for File Transfer System
sudo mysql -u root -p << EOF
CREATE DATABASE file_transfer CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER 'fileuser'@'localhost' IDENTIFIED BY 'secure_password_here';
GRANT ALL PRIVILEGES ON file_transfer.* TO 'fileuser'@'localhost';
FLUSH PRIVILEGES;
EXIT;
EOF

## Step 5: Install Nginx (for reverse proxy)

### Install Nginx
sudo apt install -y nginx

### Enable and start Nginx
sudo systemctl enable nginx
sudo systemctl start nginx

### Configure firewall (if UFW is enabled)
sudo ufw allow 'Nginx Full'
sudo ufw allow OpenSSH

## Step 6: Download and Setup File Transfer System

### Create application directory
sudo mkdir -p /opt/file-transfer
sudo chown $USER:$USER /opt/file-transfer
cd /opt/file-transfer

### Clone or download the application files
# If using git:
git clone <your-repository-url> .

# If using uploaded files, extract them here:
# unzip file-transfer-system.zip
# mv file-transfer-system/* .

### Set proper permissions
sudo chown -R $USER:$USER /opt/file-transfer
chmod +x scripts/setup.js

## Step 7: Configure Environment Variables

### Backend configuration
cp backend/.env.example backend/.env

### Edit backend environment file
nano backend/.env

# Configure the following variables:
# Database settings
DB_HOST=localhost
DB_NAME=file_transfer
DB_USER=fileuser
DB_PASSWORD=secure_password_here

# JWT Secret (generate a secure random string)
JWT_SECRET=your-super-secret-jwt-key-minimum-32-characters-long

# LDAP Configuration (adjust for your environment)
LDAP_URL=ldap://your-ldap-server:389
LDAP_BIND_DN=cn=service-account,ou=users,dc=company,dc=com
LDAP_BIND_PASSWORD=ldap-service-password
LDAP_SEARCH_BASE=ou=users,dc=company,dc=com
LDAP_DOMAIN=company.com

# SMTP Configuration
SMTP_HOST=smtp.company.com
SMTP_PORT=587
SMTP_USER=noreply@company.com
SMTP_PASSWORD=smtp-password
SMTP_FROM_EMAIL=noreply@company.com

# Application settings
NODE_ENV=production
PORT=8080
FRONTEND_URL=https://your-domain.com

### Frontend configuration
cp frontend/.env.example frontend/.env

### Edit frontend environment file
nano frontend/.env

# Configure API URL
REACT_APP_API_URL=https://your-domain.com/api/v1
REACT_APP_NAME=File Transfer System

## Step 8: Docker Deployment (Recommended)

### Create Docker environment file
cp .env.example .env

### Edit Docker environment file
nano .env

# Configure the following:
DB_ROOT_PASSWORD=secure_mysql_root_password
DB_NAME=file_transfer
DB_USER=fileuser
DB_PASSWORD=secure_database_password
JWT_SECRET=your-super-secret-jwt-key-minimum-32-characters-long
REDIS_PASSWORD=secure_redis_password

# LDAP settings
LDAP_URL=ldap://your-ldap-server:389
LDAP_BIND_DN=cn=service-account,ou=users,dc=company,dc=com
LDAP_BIND_PASSWORD=ldap-service-password
LDAP_SEARCH_BASE=ou=users,dc=company,dc=com

# SMTP settings
SMTP_HOST=smtp.company.com
SMTP_USER=noreply@company.com
SMTP_PASSWORD=smtp-password

### Build and start the application
docker compose up -d

### Verify all containers are running
docker compose ps

### Check logs if needed
docker compose logs -f

## Step 9: Manual Installation (Alternative to Docker)

### Install dependencies
npm run install:all

### Build frontend
cd frontend
npm run build
cd ..

### Create necessary directories
sudo mkdir -p /var/log/file-transfer
sudo mkdir -p /opt/file-transfer/uploads
sudo chown -R $USER:$USER /var/log/file-transfer
sudo chown -R $USER:$USER /opt/file-transfer/uploads

### Initialize database
cd backend
npm run migrate
npm run seed
cd ..

### Install PM2 for process management
sudo npm install -g pm2

### Create PM2 ecosystem file
cat > ecosystem.config.js << EOF
module.exports = {
  apps: [{
    name: 'file-transfer-api',
    script: 'backend/src/server.js',
    cwd: '/opt/file-transfer',
    instances: 1,
    exec_mode: 'fork',
    env: {
      NODE_ENV: 'production',
      PORT: 8080
    },
    log_file: '/var/log/file-transfer/combined.log',
    out_file: '/var/log/file-transfer/out.log',
    error_file: '/var/log/file-transfer/error.log',
    log_date_format: 'YYYY-MM-DD HH:mm:ss Z'
  }]
};
EOF

### Start application with PM2
pm2 start ecosystem.config.js
pm2 save
pm2 startup

## Step 10: Configure Nginx Reverse Proxy

### Create Nginx configuration
sudo nano /etc/nginx/sites-available/file-transfer

# Add the following configuration:
server {
    listen 80;
    server_name your-domain.com;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name your-domain.com;
    
    # SSL Configuration (adjust paths to your certificates)
    ssl_certificate /etc/ssl/certs/your-domain.crt;
    ssl_certificate_key /etc/ssl/private/your-domain.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    # File upload size limit
    client_max_body_size 10G;
    
    # Frontend (React build)
    location / {
        root /opt/file-transfer/frontend/build;
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # API proxy
    location /api/ {
        proxy_pass http://localhost:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts for large file uploads
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffering off;
        proxy_request_buffering off;
    }
    
    # Health check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

### Enable the site
sudo ln -s /etc/nginx/sites-available/file-transfer /etc/nginx/sites-enabled/
sudo rm -f /etc/nginx/sites-enabled/default

### Test Nginx configuration
sudo nginx -t

### Reload Nginx
sudo systemctl reload nginx

## Step 11: SSL Certificate Setup

### Option A: Let's Encrypt (Free SSL)
sudo apt install -y certbot python3-certbot-nginx

# Obtain certificate
sudo certbot --nginx -d your-domain.com

# Auto-renewal
sudo crontab -e
# Add this line:
0 12 * * * /usr/bin/certbot renew --quiet

### Option B: Self-signed certificate (for testing)
sudo mkdir -p /etc/ssl/private
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout /etc/ssl/private/file-transfer.key \
    -out /etc/ssl/certs/file-transfer.crt

## Step 12: Configure Firewall

### Install and configure UFW
sudo apt install -y ufw

### Configure firewall rules
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh
sudo ufw allow 'Nginx Full'

### Enable firewall
sudo ufw --force enable

### Check firewall status
sudo ufw status

## Step 13: Setup Log Rotation

### Create logrotate configuration
sudo nano /etc/logrotate.d/file-transfer

# Add the following:
/var/log/file-transfer/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 644 $USER $USER
    postrotate
        pm2 reload file-transfer-api
    endscript
}

## Step 14: Setup Monitoring and Maintenance

### Create maintenance script
sudo nano /opt/file-transfer/maintenance.sh

#!/bin/bash
# File Transfer System Maintenance Script

# Cleanup expired files
docker compose exec backend node -e "require('./src/jobs/cleanupJob').runCleanup()"

# Backup database (if using Docker)
docker compose exec database mysqldump -u root -p$DB_ROOT_PASSWORD file_transfer > /opt/file-transfer/backups/db_backup_$(date +%Y%m%d_%H%M%S).sql

# Rotate logs
logrotate -f /etc/logrotate.d/file-transfer

# Check disk space
df -h /opt/file-transfer

echo "Maintenance completed at $(date)"

### Make script executable
sudo chmod +x /opt/file-transfer/maintenance.sh

### Add to crontab for daily execution
sudo crontab -e
# Add this line for daily maintenance at 2 AM:
0 2 * * * /opt/file-transfer/maintenance.sh >> /var/log/file-transfer/maintenance.log 2>&1

## Step 15: System Service Setup (for manual installation)

### Create systemd service file
sudo nano /etc/systemd/system/file-transfer.service

[Unit]
Description=File Transfer System
After=network.target mysql.service

[Service]
Type=forking
User=$USER
WorkingDirectory=/opt/file-transfer
ExecStart=/usr/bin/pm2 start ecosystem.config.js
ExecReload=/usr/bin/pm2 reload ecosystem.config.js
ExecStop=/usr/bin/pm2 stop ecosystem.config.js
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target

### Enable and start service
sudo systemctl daemon-reload
sudo systemctl enable file-transfer
sudo systemctl start file-transfer

## Step 16: Verification and Testing

### Check all services are running
sudo systemctl status nginx
sudo systemctl status mysql  # if not using Docker
sudo systemctl status file-transfer  # if using manual installation
docker compose ps  # if using Docker

### Test application access
curl -k https://your-domain.com/health
curl -k https://your-domain.com/api/v1/system/health

### Check logs
tail -f /var/log/file-transfer/combined.log  # manual installation
docker compose logs -f  # Docker installation

### Test file upload (after LDAP configuration)
# Access https://your-domain.com in browser
# Login with LDAP credentials
# Try uploading a test file

## Step 17: LDAP Integration Testing

### Test LDAP connection
ldapsearch -x -H $LDAP_URL -D "$LDAP_BIND_DN" -W -b "$LDAP_SEARCH_BASE" "(sAMAccountName=testuser)"

### Configure LDAP groups in admin interface
# Login as admin user
# Go to Admin -> System Settings
# Configure ALLOWED_LDAP_GROUPS and ADMIN_LDAP_GROUPS

## Step 18: Backup Strategy

### Create backup directory
sudo mkdir -p /opt/file-transfer/backups
sudo chown $USER:$USER /opt/file-transfer/backups

### Database backup script
cat > /opt/file-transfer/backup-db.sh << EOF
#!/bin/bash
BACKUP_DIR="/opt/file-transfer/backups"
DATE=$(date +%Y%m%d_%H%M%S)

# Docker installation
if command -v docker compose &> /dev/null; then
    docker compose exec -T database mysqldump -u root -p\$DB_ROOT_PASSWORD file_transfer > \$BACKUP_DIR/db_backup_\$DATE.sql
else
    # Manual installation
    mysqldump -u fileuser -p file_transfer > \$BACKUP_DIR/db_backup_\$DATE.sql
fi

# Keep only last 30 days of backups
find \$BACKUP_DIR -name "db_backup_*.sql" -mtime +30 -delete

echo "Database backup completed: db_backup_\$DATE.sql"
EOF

chmod +x /opt/file-transfer/backup-db.sh

### Add to crontab for daily backups
crontab -e
# Add this line for daily backup at 1 AM:
0 1 * * * /opt/file-transfer/backup-db.sh >> /var/log/file-transfer/backup.log 2>&1

## Step 19: Security Hardening

### Disable root SSH login
sudo nano /etc/ssh/sshd_config
# Set: PermitRootLogin no
sudo systemctl restart ssh

### Install fail2ban
sudo apt install -y fail2ban

### Configure fail2ban for nginx
sudo nano /etc/fail2ban/jail.local

[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 5

[nginx-http-auth]
enabled = true
port = http,https
logpath = /var/log/nginx/error.log

[nginx-limit-req]
enabled = true
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 10

sudo systemctl enable fail2ban
sudo systemctl start fail2ban

## Step 20: Final Configuration

### Set proper file permissions
sudo chown -R $USER:$USER /opt/file-transfer
sudo chmod -R 755 /opt/file-transfer
sudo chmod -R 700 /opt/file-transfer/uploads

### Configure log permissions
sudo chown -R $USER:$USER /var/log/file-transfer
sudo chmod -R 644 /var/log/file-transfer

### Test email functionality
# Configure SMTP settings in admin interface
# Send test email to verify email delivery

## Troubleshooting

### Common Issues and Solutions

1. **Docker containers not starting**
   - Check logs: docker compose logs
   - Verify environment variables in .env file
   - Ensure ports are not in use: netstat -tulpn

2. **Database connection errors**
   - Verify MySQL is running: sudo systemctl status mysql
   - Check database credentials in .env file
   - Test connection: mysql -u fileuser -p file_transfer

3. **LDAP authentication not working**
   - Test LDAP connection with ldapsearch
   - Verify LDAP settings in backend/.env
   - Check firewall rules for LDAP port (389/636)

4. **File uploads failing**
   - Check disk space: df -h
   - Verify upload directory permissions
   - Check nginx client_max_body_size setting

5. **SSL certificate issues**
   - Verify certificate files exist and are readable
   - Check certificate validity: openssl x509 -in cert.crt -text -noout
   - Test SSL configuration: nginx -t

### Log Locations
- Application logs: /var/log/file-transfer/
- Nginx logs: /var/log/nginx/
- System logs: /var/log/syslog
- Docker logs: docker compose logs

### Useful Commands
- Restart application: sudo systemctl restart file-transfer
- Reload nginx: sudo systemctl reload nginx
- View real-time logs: tail -f /var/log/file-transfer/combined.log
- Check system resources: htop or top
- Monitor disk usage: du -sh /opt/file-transfer/uploads

## Post-Installation

1. **Access the application**: https://your-domain.com
2. **Login with LDAP credentials**
3. **Configure system settings** in admin interface
4. **Test file upload and email functionality**
5. **Set up regular backups and monitoring**
6. **Document your specific configuration** for future reference

## Support and Maintenance

- Regular system updates: sudo apt update && sudo apt upgrade
- Monitor log files for errors
- Regular database backups
- Monitor disk space usage
- Keep SSL certificates updated
- Review and update LDAP group configurations as needed

Installation completed! Your File Transfer System should now be fully operational.
