version: '3.8'

services:
  # MySQL Database
  database:
    image: mysql:8.0
    container_name: file-transfer-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-file_transfer}
      MYSQL_USER: ${DB_USER:-fileuser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-filepassword}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - file-transfer-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: file-transfer-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: database
      DB_NAME: ${DB_NAME:-file_transfer}
      DB_USER: ${DB_USER:-fileuser}
      DB_PASSWORD: ${DB_PASSWORD:-filepassword}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      LDAP_URL: ${LDAP_URL:-ldap://your-ldap-server:389}
      LDAP_BIND_DN: ${LDAP_BIND_DN:-cn=admin,dc=example,dc=com}
      LDAP_BIND_PASSWORD: ${LDAP_BIND_PASSWORD:-admin-password}
      LDAP_SEARCH_BASE: ${LDAP_SEARCH_BASE:-ou=users,dc=example,dc=com}
      SMTP_HOST: ${SMTP_HOST:-smtp.example.com}
      SMTP_USER: ${SMTP_USER:-noreply@example.com}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-smtp-password}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "8080:8080"
    networks:
      - file-transfer-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: file-transfer-web
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - file-transfer-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: file-transfer-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - file-transfer-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  redis_data:
    driver: local

networks:
  file-transfer-network:
    driver: bridge
